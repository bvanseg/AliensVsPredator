package org.alien.common.world.dimension.acheron.worldgen.formations;

import com.asx.mdx.common.minecraft.Pos;

import java.util.ArrayList;
import java.util.List;

public class LV426Formation4 extends LV426Formation
{
    public LV426Formation4()
    {
        ;
    }
    
    @Override
    public Pos[] getOffsets()
    {
        List<Pos> set = new ArrayList<Pos>();
        
		offset(set, 0, 0, 4);
		offset(set, 0, 12, 4);
		offset(set, 1, 0, 3);
		offset(set, 1, 0, 4);
		offset(set, 1, 0, 5);
		offset(set, 1, 1, 4);
		offset(set, 1, 11, 4);
		offset(set, 1, 12, 4);
		offset(set, 2, 0, 2);
		offset(set, 2, 0, 3);
		offset(set, 2, 0, 4);
		offset(set, 2, 0, 5);
		offset(set, 2, 0, 6);
		offset(set, 2, 1, 3);
		offset(set, 2, 1, 4);
		offset(set, 2, 1, 5);
		offset(set, 2, 2, 4);
		offset(set, 2, 11, 4);
		offset(set, 2, 12, 3);
		offset(set, 2, 12, 4);
		offset(set, 2, 12, 5);
		offset(set, 3, 0, 2);
		offset(set, 3, 0, 3);
		offset(set, 3, 0, 4);
		offset(set, 3, 0, 5);
		offset(set, 3, 0, 6);
		offset(set, 3, 1, 3);
		offset(set, 3, 1, 4);
		offset(set, 3, 1, 5);
		offset(set, 3, 2, 3);
		offset(set, 3, 2, 4);
		offset(set, 3, 2, 5);
		offset(set, 3, 10, 4);
		offset(set, 3, 11, 3);
		offset(set, 3, 11, 4);
		offset(set, 3, 11, 5);
		offset(set, 3, 12, 4);
		offset(set, 4, 0, 1);
		offset(set, 4, 0, 2);
		offset(set, 4, 0, 3);
		offset(set, 4, 0, 4);
		offset(set, 4, 0, 5);
		offset(set, 4, 0, 6);
		offset(set, 4, 0, 7);
		offset(set, 4, 1, 2);
		offset(set, 4, 1, 3);
		offset(set, 4, 1, 4);
		offset(set, 4, 1, 5);
		offset(set, 4, 1, 6);
		offset(set, 4, 2, 3);
		offset(set, 4, 2, 4);
		offset(set, 4, 2, 5);
		offset(set, 4, 3, 3);
		offset(set, 4, 3, 4);
		offset(set, 4, 3, 5);
		offset(set, 4, 4, 4);
		offset(set, 4, 10, 4);
		offset(set, 4, 11, 3);
		offset(set, 4, 11, 4);
		offset(set, 4, 11, 5);
		offset(set, 5, 0, 2);
		offset(set, 5, 0, 3);
		offset(set, 5, 0, 4);
		offset(set, 5, 0, 5);
		offset(set, 5, 0, 6);
		offset(set, 5, 1, 3);
		offset(set, 5, 1, 4);
		offset(set, 5, 1, 5);
		offset(set, 5, 2, 4);
		offset(set, 5, 3, 4);
		offset(set, 5, 4, 3);
		offset(set, 5, 4, 4);
		offset(set, 5, 4, 5);
		offset(set, 5, 5, 4);
		offset(set, 5, 9, 4);
		offset(set, 5, 10, 3);
		offset(set, 5, 10, 4);
		offset(set, 5, 10, 5);
		offset(set, 5, 11, 4);
		offset(set, 6, 0, 3);
		offset(set, 6, 0, 4);
		offset(set, 6, 0, 5);
		offset(set, 6, 1, 4);
		offset(set, 6, 4, 4);
		offset(set, 6, 5, 3);
		offset(set, 6, 5, 4);
		offset(set, 6, 5, 5);
		offset(set, 6, 6, 4);
		offset(set, 6, 7, 3);
		offset(set, 6, 7, 4);
		offset(set, 6, 7, 5);
		offset(set, 6, 8, 4);
		offset(set, 6, 9, 3);
		offset(set, 6, 9, 4);
		offset(set, 6, 9, 5);
		offset(set, 6, 10, 3);
		offset(set, 6, 10, 4);
		offset(set, 6, 10, 5);
		offset(set, 7, 0, 4);
		offset(set, 7, 5, 3);
		offset(set, 7, 5, 4);
		offset(set, 7, 5, 5);
		offset(set, 7, 6, 3);
		offset(set, 7, 6, 4);
		offset(set, 7, 6, 5);
		offset(set, 7, 7, 4);
		offset(set, 7, 8, 3);
		offset(set, 7, 8, 4);
		offset(set, 7, 8, 5);
		offset(set, 7, 9, 3);
		offset(set, 7, 9, 4);
		offset(set, 7, 9, 5);
		offset(set, 7, 10, 4);
		offset(set, 8, 0, 4);
		offset(set, 8, 5, 4);
		offset(set, 8, 6, 4);
		offset(set, 8, 7, 3);
		offset(set, 8, 7, 4);
		offset(set, 8, 7, 5);
		offset(set, 8, 8, 3);
		offset(set, 8, 8, 4);
		offset(set, 8, 8, 5);
		offset(set, 8, 9, 3);
		offset(set, 8, 9, 4);
		offset(set, 8, 9, 5);
		offset(set, 9, 0, 3);
		offset(set, 9, 0, 4);
		offset(set, 9, 0, 5);
		offset(set, 9, 1, 3);
		offset(set, 9, 1, 4);
		offset(set, 9, 1, 5);
		offset(set, 9, 2, 4);
		offset(set, 9, 6, 4);
		offset(set, 9, 7, 3);
		offset(set, 9, 7, 4);
		offset(set, 9, 7, 5);
		offset(set, 9, 8, 4);
		offset(set, 9, 9, 4);
		offset(set, 10, 0, 2);
		offset(set, 10, 0, 3);
		offset(set, 10, 0, 4);
		offset(set, 10, 0, 5);
		offset(set, 10, 0, 6);
		offset(set, 10, 1, 3);
		offset(set, 10, 1, 4);
		offset(set, 10, 1, 5);
		offset(set, 10, 2, 3);
		offset(set, 10, 2, 4);
		offset(set, 10, 2, 5);
		offset(set, 10, 3, 4);
		offset(set, 10, 6, 4);
		offset(set, 10, 7, 4);
		offset(set, 10, 8, 3);
		offset(set, 10, 8, 4);
		offset(set, 10, 8, 5);
		offset(set, 11, 0, 1);
		offset(set, 11, 0, 2);
		offset(set, 11, 0, 3);
		offset(set, 11, 0, 4);
		offset(set, 11, 0, 5);
		offset(set, 11, 0, 6);
		offset(set, 11, 0, 7);
		offset(set, 11, 1, 2);
		offset(set, 11, 1, 3);
		offset(set, 11, 1, 4);
		offset(set, 11, 1, 5);
		offset(set, 11, 1, 6);
		offset(set, 11, 2, 3);
		offset(set, 11, 2, 4);
		offset(set, 11, 2, 5);
		offset(set, 11, 3, 3);
		offset(set, 11, 3, 4);
		offset(set, 11, 3, 5);
		offset(set, 11, 4, 4);
		offset(set, 11, 5, 4);
		offset(set, 11, 6, 3);
		offset(set, 11, 6, 4);
		offset(set, 11, 6, 5);
		offset(set, 11, 7, 3);
		offset(set, 11, 7, 4);
		offset(set, 11, 7, 5);
		offset(set, 12, 0, 1);
		offset(set, 12, 0, 2);
		offset(set, 12, 0, 3);
		offset(set, 12, 0, 4);
		offset(set, 12, 0, 5);
		offset(set, 12, 0, 6);
		offset(set, 12, 0, 7);
		offset(set, 12, 1, 2);
		offset(set, 12, 1, 3);
		offset(set, 12, 1, 4);
		offset(set, 12, 1, 5);
		offset(set, 12, 1, 6);
		offset(set, 12, 2, 2);
		offset(set, 12, 2, 3);
		offset(set, 12, 2, 4);
		offset(set, 12, 2, 5);
		offset(set, 12, 2, 6);
		offset(set, 12, 3, 3);
		offset(set, 12, 3, 4);
		offset(set, 12, 3, 5);
		offset(set, 12, 4, 4);
		offset(set, 12, 5, 3);
		offset(set, 12, 5, 4);
		offset(set, 12, 5, 5);
		offset(set, 12, 6, 4);
		offset(set, 12, 7, 3);
		offset(set, 12, 7, 5);
		offset(set, 13, 0, 1);
		offset(set, 13, 0, 2);
		offset(set, 13, 0, 3);
		offset(set, 13, 0, 4);
		offset(set, 13, 0, 5);
		offset(set, 13, 0, 6);
		offset(set, 13, 0, 7);
		offset(set, 13, 0, 8);
		offset(set, 13, 1, 1);
		offset(set, 13, 1, 2);
		offset(set, 13, 1, 3);
		offset(set, 13, 1, 4);
		offset(set, 13, 1, 5);
		offset(set, 13, 1, 6);
		offset(set, 13, 1, 7);
		offset(set, 13, 2, 2);
		offset(set, 13, 2, 3);
		offset(set, 13, 2, 4);
		offset(set, 13, 2, 5);
		offset(set, 13, 2, 6);
		offset(set, 13, 3, 3);
		offset(set, 13, 3, 4);
		offset(set, 13, 3, 5);
		offset(set, 13, 4, 4);
		offset(set, 13, 5, 3);
		offset(set, 13, 5, 4);
		offset(set, 13, 5, 5);
		offset(set, 13, 6, 3);
		offset(set, 13, 6, 4);
		offset(set, 13, 6, 5);
		offset(set, 14, 0, 0);
		offset(set, 14, 0, 1);
		offset(set, 14, 0, 2);
		offset(set, 14, 0, 3);
		offset(set, 14, 0, 4);
		offset(set, 14, 0, 5);
		offset(set, 14, 0, 6);
		offset(set, 14, 0, 7);
		offset(set, 14, 0, 8);
		offset(set, 14, 1, 0);
		offset(set, 14, 1, 1);
		offset(set, 14, 1, 2);
		offset(set, 14, 1, 3);
		offset(set, 14, 1, 4);
		offset(set, 14, 1, 5);
		offset(set, 14, 1, 6);
		offset(set, 14, 1, 7);
		offset(set, 14, 1, 8);
		offset(set, 14, 2, 1);
		offset(set, 14, 2, 2);
		offset(set, 14, 2, 3);
		offset(set, 14, 2, 4);
		offset(set, 14, 2, 5);
		offset(set, 14, 2, 6);
		offset(set, 14, 2, 7);
		offset(set, 14, 3, 2);
		offset(set, 14, 3, 3);
		offset(set, 14, 3, 4);
		offset(set, 14, 3, 5);
		offset(set, 14, 3, 6);
		offset(set, 14, 4, 3);
		offset(set, 14, 4, 4);
		offset(set, 14, 4, 5);
		offset(set, 15, 0, 0);
		offset(set, 15, 0, 1);
		offset(set, 15, 0, 2);
		offset(set, 15, 0, 3);
		offset(set, 15, 0, 4);
		offset(set, 15, 0, 5);
		offset(set, 15, 0, 6);
		offset(set, 15, 0, 7);
		offset(set, 15, 0, 8);
		offset(set, 15, 1, 0);
		offset(set, 15, 1, 1);
		offset(set, 15, 1, 2);
		offset(set, 15, 1, 3);
		offset(set, 15, 1, 4);
		offset(set, 15, 1, 5);
		offset(set, 15, 1, 6);
		offset(set, 15, 1, 7);
		offset(set, 15, 1, 8);
		offset(set, 15, 2, 1);
		offset(set, 15, 2, 2);
		offset(set, 15, 2, 3);
		offset(set, 15, 2, 4);
		offset(set, 15, 2, 5);
		offset(set, 15, 2, 6);
		offset(set, 15, 2, 7);
		offset(set, 15, 3, 3);
		offset(set, 15, 3, 4);
		offset(set, 15, 3, 5);
		offset(set, 16, 0, 0);
		offset(set, 16, 0, 1);
		offset(set, 16, 0, 2);
		offset(set, 16, 0, 3);
		offset(set, 16, 0, 4);
		offset(set, 16, 0, 5);
		offset(set, 16, 0, 6);
		offset(set, 16, 0, 7);
		offset(set, 16, 0, 8);
		offset(set, 16, 1, 1);
		offset(set, 16, 1, 2);
		offset(set, 16, 1, 3);
		offset(set, 16, 1, 4);
		offset(set, 16, 1, 5);
		offset(set, 16, 1, 6);
		offset(set, 16, 1, 7);
		offset(set, 16, 2, 1);
		offset(set, 16, 2, 2);
		offset(set, 16, 2, 3);
		offset(set, 16, 2, 4);
		offset(set, 16, 2, 5);
		offset(set, 16, 2, 6);
		offset(set, 16, 2, 7);
		offset(set, 16, 3, 3);
		offset(set, 16, 3, 4);
		offset(set, 16, 3, 5);
		offset(set, 17, 0, 1);
		offset(set, 17, 0, 2);
		offset(set, 17, 0, 3);
		offset(set, 17, 0, 4);
		offset(set, 17, 0, 5);
		offset(set, 17, 0, 6);
		offset(set, 17, 0, 7);
		offset(set, 17, 1, 1);
		offset(set, 17, 1, 2);
		offset(set, 17, 1, 3);
		offset(set, 17, 1, 4);
		offset(set, 17, 1, 5);
		offset(set, 17, 1, 6);
		offset(set, 17, 1, 7);
		offset(set, 17, 2, 3);
		offset(set, 17, 2, 4);
		offset(set, 17, 2, 5);
		offset(set, 18, 0, 2);
		offset(set, 18, 0, 3);
		offset(set, 18, 0, 4);
		offset(set, 18, 0, 5);
		offset(set, 18, 0, 6);
		offset(set, 18, 1, 4);
		offset(set, 19, 0, 3);
		offset(set, 19, 0, 4);
		offset(set, 19, 0, 5);
		offset(set, 19, 1, 4);

        return set.toArray(new Pos[set.size()]);
    }
}