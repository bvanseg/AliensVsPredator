package org.avp.common.world.dimension.acheron.worldgen.formations;

import java.util.ArrayList;
import java.util.List;

import com.asx.mdx.lib.world.Pos;

public class LV426Formation3 extends LV426Formation
{
    public LV426Formation3()
    {
        ;
    }
    
    @Override
    public Pos[] getOffsets()
    {
        List<Pos> set = new ArrayList<Pos>();
        
		offset(set, 0, 0, 3);
		offset(set, 1, 0, 2);
		offset(set, 1, 0, 3);
		offset(set, 1, 0, 4);
		offset(set, 1, 1, 3);
		offset(set, 2, 0, 1);
		offset(set, 2, 0, 2);
		offset(set, 2, 0, 3);
		offset(set, 2, 0, 4);
		offset(set, 2, 0, 5);
		offset(set, 2, 1, 2);
		offset(set, 2, 1, 3);
		offset(set, 2, 1, 4);
		offset(set, 2, 2, 3);
		offset(set, 2, 3, 3);
		offset(set, 2, 4, 3);
		offset(set, 2, 11, 3);
		offset(set, 2, 12, 3);
		offset(set, 2, 13, 2);
		offset(set, 2, 13, 3);
		offset(set, 2, 13, 4);
		offset(set, 2, 14, 3);
		offset(set, 3, 0, 0);
		offset(set, 3, 0, 1);
		offset(set, 3, 0, 2);
		offset(set, 3, 0, 3);
		offset(set, 3, 0, 4);
		offset(set, 3, 0, 5);
		offset(set, 3, 0, 6);
		offset(set, 3, 1, 1);
		offset(set, 3, 1, 2);
		offset(set, 3, 1, 3);
		offset(set, 3, 1, 4);
		offset(set, 3, 1, 5);
		offset(set, 3, 2, 2);
		offset(set, 3, 2, 3);
		offset(set, 3, 2, 4);
		offset(set, 3, 3, 2);
		offset(set, 3, 3, 3);
		offset(set, 3, 3, 4);
		offset(set, 3, 4, 2);
		offset(set, 3, 4, 3);
		offset(set, 3, 4, 4);
		offset(set, 3, 5, 3);
		offset(set, 3, 10, 3);
		offset(set, 3, 11, 2);
		offset(set, 3, 11, 3);
		offset(set, 3, 11, 4);
		offset(set, 3, 12, 2);
		offset(set, 3, 12, 3);
		offset(set, 3, 12, 4);
		offset(set, 3, 13, 3);
		offset(set, 4, 0, 1);
		offset(set, 4, 0, 2);
		offset(set, 4, 0, 3);
		offset(set, 4, 0, 4);
		offset(set, 4, 0, 5);
		offset(set, 4, 1, 2);
		offset(set, 4, 1, 3);
		offset(set, 4, 1, 4);
		offset(set, 4, 2, 3);
		offset(set, 4, 3, 2);
		offset(set, 4, 3, 3);
		offset(set, 4, 3, 4);
		offset(set, 4, 4, 3);
		offset(set, 4, 5, 2);
		offset(set, 4, 5, 3);
		offset(set, 4, 5, 4);
		offset(set, 4, 6, 2);
		offset(set, 4, 6, 3);
		offset(set, 4, 6, 4);
		offset(set, 4, 7, 3);
		offset(set, 4, 8, 3);
		offset(set, 4, 9, 2);
		offset(set, 4, 9, 3);
		offset(set, 4, 9, 4);
		offset(set, 4, 10, 2);
		offset(set, 4, 10, 3);
		offset(set, 4, 10, 4);
		offset(set, 4, 11, 3);
		offset(set, 5, 0, 2);
		offset(set, 5, 0, 3);
		offset(set, 5, 0, 4);
		offset(set, 5, 1, 3);
		offset(set, 5, 5, 3);
		offset(set, 5, 6, 2);
		offset(set, 5, 6, 3);
		offset(set, 5, 6, 4);
		offset(set, 5, 7, 3);
		offset(set, 5, 8, 2);
		offset(set, 5, 8, 3);
		offset(set, 5, 8, 4);
		offset(set, 5, 9, 3);
		offset(set, 6, 0, 3);
		offset(set, 6, 6, 3);
		offset(set, 6, 7, 2);
		offset(set, 6, 7, 3);
		offset(set, 6, 7, 4);
		offset(set, 6, 8, 2);
		offset(set, 6, 8, 3);
		offset(set, 6, 8, 4);
		offset(set, 7, 5, 3);
		offset(set, 7, 6, 2);
		offset(set, 7, 6, 3);
		offset(set, 7, 6, 4);
		offset(set, 7, 7, 2);
		offset(set, 7, 7, 3);
		offset(set, 7, 7, 4);
		offset(set, 7, 8, 3);
		offset(set, 8, 4, 3);
		offset(set, 8, 5, 2);
		offset(set, 8, 5, 3);
		offset(set, 8, 5, 4);
		offset(set, 8, 6, 3);
		offset(set, 9, 0, 3);
		offset(set, 9, 4, 2);
		offset(set, 9, 4, 3);
		offset(set, 9, 4, 4);
		offset(set, 9, 5, 2);
		offset(set, 9, 5, 3);
		offset(set, 9, 5, 4);
		offset(set, 10, 0, 2);
		offset(set, 10, 0, 3);
		offset(set, 10, 0, 4);
		offset(set, 10, 1, 3);
		offset(set, 10, 3, 3);
		offset(set, 10, 4, 2);
		offset(set, 10, 4, 3);
		offset(set, 10, 4, 4);
		offset(set, 10, 5, 3);
		offset(set, 11, 0, 1);
		offset(set, 11, 0, 2);
		offset(set, 11, 0, 3);
		offset(set, 11, 0, 4);
		offset(set, 11, 0, 5);
		offset(set, 11, 1, 2);
		offset(set, 11, 1, 3);
		offset(set, 11, 1, 4);
		offset(set, 11, 2, 3);
		offset(set, 11, 3, 2);
		offset(set, 11, 3, 3);
		offset(set, 11, 3, 4);
		offset(set, 11, 4, 2);
		offset(set, 11, 4, 3);
		offset(set, 11, 4, 4);
		offset(set, 12, 0, 0);
		offset(set, 12, 0, 1);
		offset(set, 12, 0, 2);
		offset(set, 12, 0, 3);
		offset(set, 12, 0, 4);
		offset(set, 12, 0, 5);
		offset(set, 12, 0, 6);
		offset(set, 12, 1, 1);
		offset(set, 12, 1, 2);
		offset(set, 12, 1, 3);
		offset(set, 12, 1, 4);
		offset(set, 12, 1, 5);
		offset(set, 12, 2, 2);
		offset(set, 12, 2, 3);
		offset(set, 12, 2, 4);
		offset(set, 12, 3, 3);
		offset(set, 13, 0, 0);
		offset(set, 13, 0, 1);
		offset(set, 13, 0, 2);
		offset(set, 13, 0, 3);
		offset(set, 13, 0, 4);
		offset(set, 13, 0, 5);
		offset(set, 13, 0, 6);
		offset(set, 13, 1, 1);
		offset(set, 13, 1, 2);
		offset(set, 13, 1, 3);
		offset(set, 13, 1, 4);
		offset(set, 13, 1, 5);
		offset(set, 13, 2, 2);
		offset(set, 13, 2, 3);
		offset(set, 13, 2, 4);
		offset(set, 14, 0, 1);
		offset(set, 14, 0, 2);
		offset(set, 14, 0, 3);
		offset(set, 14, 0, 4);
		offset(set, 14, 0, 5);
		offset(set, 14, 1, 2);
		offset(set, 14, 1, 3);
		offset(set, 14, 1, 4);
		offset(set, 15, 0, 1);
		offset(set, 15, 0, 2);
		offset(set, 15, 0, 3);
		offset(set, 15, 0, 4);
		offset(set, 15, 0, 5);
		offset(set, 15, 1, 2);
		offset(set, 15, 1, 3);
		offset(set, 15, 1, 4);
		offset(set, 16, 0, 2);
		offset(set, 16, 0, 3);
		offset(set, 16, 0, 4);

        return set.toArray(new Pos[set.size()]);
    }
}