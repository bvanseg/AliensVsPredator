package org.avp.client.model.tile.rackmodule;

import com.asx.mdx.client.render.model.Model;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.client.renderer.GlStateManager;

//TODO: Use a better type than Object for Model.
public class ModelRackModule7 extends Model<Object>
{
    public final ModelRenderer faceplate;
    public final ModelRenderer light01;
    public final ModelRenderer light02;
    public final ModelRenderer light03;
    public final ModelRenderer rack01;
    public final ModelRenderer cassette01;
    public final ModelRenderer rSide;
    public final ModelRenderer rhandle;
    public final ModelRenderer lhandle;
    public final ModelRenderer lSide;
    public final ModelRenderer back;
    public final ModelRenderer cassette02;
    public final ModelRenderer rack02;
    public final ModelRenderer rack03;
    public final ModelRenderer rack04;
    public final ModelRenderer rack05;
    public final ModelRenderer rack06;
    public final ModelRenderer rack00;
    public final ModelRenderer rack07;
    public final ModelRenderer lightBank;

    public ModelRackModule7()
    {
        this.textureWidth = 128;
        this.textureHeight = 64;
        this.rack01 = new ModelRenderer(this, 88, 0);
        this.rack01.setRotationPoint(-7.0F, 1.2F, 0.0F);
        this.rack01.addBox(-1.0F, -0.5F, 0.1F, 2, 1, 12, 0.0F);
        this.back = new ModelRenderer(this, 38, 24);
        this.back.setRotationPoint(0.0F, 7.8F, 10.9F);
        this.back.addBox(-12.0F, -7.2F, 0.1F, 24, 8, 2, 0.0F);
        this.lightBank = new ModelRenderer(this, 12, 0);
        this.lightBank.setRotationPoint(-8.9F, 1.3F, 0.4F);
        this.lightBank.addBox(-1.0F, 0.0F, -0.6F, 2, 5, 1, 0.0F);
        this.rack00 = new ModelRenderer(this, 95, 20);
        this.rack00.setRotationPoint(-7.0F, 1.8F, 0.0F);
        this.rack00.addBox(-1.6F, -0.5F, 0.2F, 1, 6, 12, 0.0F);
        this.rack05 = new ModelRenderer(this, 88, 0);
        this.rack05.setRotationPoint(7.0F, 3.8F, 0.0F);
        this.rack05.addBox(-1.0F, -0.5F, 0.1F, 2, 1, 12, 0.0F);
        this.cassette01 = new ModelRenderer(this, 34, 37);
        this.cassette01.setRotationPoint(0.0F, 2.4F, 0.0F);
        this.cassette01.addBox(-7.5F, -1.0F, -0.1F, 15, 2, 11, 0.0F);
        this.rack07 = new ModelRenderer(this, 95, 20);
        this.rack07.setRotationPoint(6.0F, 1.8F, 0.0F);
        this.rack07.addBox(1.6F, -0.5F, 0.2F, 1, 6, 12, 0.0F);
        this.light02 = new ModelRenderer(this, 0, 0);
        this.light02.setRotationPoint(0.0F, 0.3F, 0.0F);
        this.light02.addBox(-9.4F, 2.5F, -0.35F, 1, 1, 1, 0.0F);
        this.rack03 = new ModelRenderer(this, 88, 0);
        this.rack03.setRotationPoint(-7.0F, 6.6F, 0.0F);
        this.rack03.addBox(-1.0F, -0.5F, 0.1F, 2, 1, 12, 0.0F);
        this.rack04 = new ModelRenderer(this, 88, 0);
        this.rack04.setRotationPoint(7.0F, 1.2F, 0.0F);
        this.rack04.addBox(-1.0F, -0.5F, 0.1F, 2, 1, 12, 0.0F);
        this.rSide = new ModelRenderer(this, 0, 23);
        this.rSide.mirror = true;
        this.rSide.setRotationPoint(0.0F, 4.0F, 0.0F);
        this.rSide.addBox(-12.0F, -3.4F, 0.0F, 4, 8, 11, 0.0F);
        this.light01 = new ModelRenderer(this, 0, 0);
        this.light01.setRotationPoint(0.0F, 0.2F, 0.0F);
        this.light01.addBox(-9.4F, 1.3F, -0.35F, 1, 1, 1, 0.0F);
        this.cassette02 = new ModelRenderer(this, 34, 37);
        this.cassette02.setRotationPoint(0.0F, 5.0F, 0.0F);
        this.cassette02.addBox(-7.5F, -1.0F, -0.1F, 15, 2, 11, 0.0F);
        this.lhandle = new ModelRenderer(this, 71, 0);
        this.lhandle.setRotationPoint(0.0F, 0.0F, 0.0F);
        this.lhandle.addBox(9.8F, 1.5F, -1.8F, 1, 6, 2, 0.0F);
        this.faceplate = new ModelRenderer(this, 0, 7);
        this.faceplate.setRotationPoint(0.0F, 7.6F, 0.0F);
        this.faceplate.addBox(-8.0F, -1.0F, 0.0F, 16, 2, 11, 0.0F);
        this.light03 = new ModelRenderer(this, 0, 5);
        this.light03.setRotationPoint(0.0F, 0.2F, 0.0F);
        this.light03.addBox(-9.4F, 3.8F, -0.35F, 1, 2, 1, 0.0F);
        this.rack02 = new ModelRenderer(this, 88, 0);
        this.rack02.setRotationPoint(-7.0F, 3.8F, 0.0F);
        this.rack02.addBox(-1.0F, -0.5F, 0.1F, 2, 1, 12, 0.0F);
        this.rhandle = new ModelRenderer(this, 71, 0);
        this.rhandle.mirror = true;
        this.rhandle.setRotationPoint(0.0F, 0.0F, 0.0F);
        this.rhandle.addBox(-10.8F, 1.5F, -1.8F, 1, 6, 2, 0.0F);
        this.rack06 = new ModelRenderer(this, 88, 0);
        this.rack06.setRotationPoint(7.0F, 6.6F, 0.0F);
        this.rack06.addBox(-1.0F, -0.5F, 0.1F, 2, 1, 12, 0.0F);
        this.lSide = new ModelRenderer(this, 0, 45);
        this.lSide.setRotationPoint(0.0F, 4.0F, 0.0F);
        this.lSide.addBox(8.0F, -3.4F, 0.0F, 4, 8, 11, 0.0F);
    }
    
    @Override
    public void render(Object obj)
    {
        GlStateManager.pushMatrix();
        GlStateManager.translate(this.rack01.offsetX, this.rack01.offsetY, this.rack01.offsetZ);
        GlStateManager.translate(this.rack01.rotationPointX * DEFAULT_SCALE, this.rack01.rotationPointY * DEFAULT_SCALE, this.rack01.rotationPointZ * DEFAULT_SCALE);
        GlStateManager.scale(1.0D, 0.8D, 1.0D);
        GlStateManager.translate(-this.rack01.offsetX, -this.rack01.offsetY, -this.rack01.offsetZ);
        GlStateManager.translate(-this.rack01.rotationPointX * DEFAULT_SCALE, -this.rack01.rotationPointY * DEFAULT_SCALE, -this.rack01.rotationPointZ * DEFAULT_SCALE);
        this.rack01.render(DEFAULT_SCALE);
        GlStateManager.popMatrix();
        this.back.render(DEFAULT_SCALE);
        GlStateManager.pushMatrix();
        GlStateManager.translate(this.lightBank.offsetX, this.lightBank.offsetY, this.lightBank.offsetZ);
        GlStateManager.translate(this.lightBank.rotationPointX * DEFAULT_SCALE, this.lightBank.rotationPointY * DEFAULT_SCALE, this.lightBank.rotationPointZ * DEFAULT_SCALE);
        GlStateManager.scale(0.7D, 1.0D, 1.0D);
        GlStateManager.translate(-this.lightBank.offsetX, -this.lightBank.offsetY, -this.lightBank.offsetZ);
        GlStateManager.translate(-this.lightBank.rotationPointX * DEFAULT_SCALE, -this.lightBank.rotationPointY * DEFAULT_SCALE, -this.lightBank.rotationPointZ * DEFAULT_SCALE);
        this.lightBank.render(DEFAULT_SCALE);
        GlStateManager.popMatrix();
        GlStateManager.pushMatrix();
        GlStateManager.translate(this.rack00.offsetX, this.rack00.offsetY, this.rack00.offsetZ);
        GlStateManager.translate(this.rack00.rotationPointX * DEFAULT_SCALE, this.rack00.rotationPointY * DEFAULT_SCALE, this.rack00.rotationPointZ * DEFAULT_SCALE);
        GlStateManager.scale(1.0D, 0.8D, 1.0D);
        GlStateManager.translate(-this.rack00.offsetX, -this.rack00.offsetY, -this.rack00.offsetZ);
        GlStateManager.translate(-this.rack00.rotationPointX * DEFAULT_SCALE, -this.rack00.rotationPointY * DEFAULT_SCALE, -this.rack00.rotationPointZ * DEFAULT_SCALE);
        this.rack00.render(DEFAULT_SCALE);
        GlStateManager.popMatrix();
        GlStateManager.pushMatrix();
        GlStateManager.translate(this.rack05.offsetX, this.rack05.offsetY, this.rack05.offsetZ);
        GlStateManager.translate(this.rack05.rotationPointX * DEFAULT_SCALE, this.rack05.rotationPointY * DEFAULT_SCALE, this.rack05.rotationPointZ * DEFAULT_SCALE);
        GlStateManager.scale(1.0D, 0.8D, 1.0D);
        GlStateManager.translate(-this.rack05.offsetX, -this.rack05.offsetY, -this.rack05.offsetZ);
        GlStateManager.translate(-this.rack05.rotationPointX * DEFAULT_SCALE, -this.rack05.rotationPointY * DEFAULT_SCALE, -this.rack05.rotationPointZ * DEFAULT_SCALE);
        this.rack05.render(DEFAULT_SCALE);
        GlStateManager.popMatrix();
        this.cassette01.render(DEFAULT_SCALE);
        GlStateManager.pushMatrix();
        GlStateManager.translate(this.rack07.offsetX, this.rack07.offsetY, this.rack07.offsetZ);
        GlStateManager.translate(this.rack07.rotationPointX * DEFAULT_SCALE, this.rack07.rotationPointY * DEFAULT_SCALE, this.rack07.rotationPointZ * DEFAULT_SCALE);
        GlStateManager.scale(1.0D, 0.8D, 1.0D);
        GlStateManager.translate(-this.rack07.offsetX, -this.rack07.offsetY, -this.rack07.offsetZ);
        GlStateManager.translate(-this.rack07.rotationPointX * DEFAULT_SCALE, -this.rack07.rotationPointY * DEFAULT_SCALE, -this.rack07.rotationPointZ * DEFAULT_SCALE);
        this.rack07.render(DEFAULT_SCALE);
        GlStateManager.popMatrix();
        this.light02.render(DEFAULT_SCALE);
        this.rack03.render(DEFAULT_SCALE);
        GlStateManager.pushMatrix();
        GlStateManager.translate(this.rack04.offsetX, this.rack04.offsetY, this.rack04.offsetZ);
        GlStateManager.translate(this.rack04.rotationPointX * DEFAULT_SCALE, this.rack04.rotationPointY * DEFAULT_SCALE, this.rack04.rotationPointZ * DEFAULT_SCALE);
        GlStateManager.scale(1.0D, 0.8D, 1.0D);
        GlStateManager.translate(-this.rack04.offsetX, -this.rack04.offsetY, -this.rack04.offsetZ);
        GlStateManager.translate(-this.rack04.rotationPointX * DEFAULT_SCALE, -this.rack04.rotationPointY * DEFAULT_SCALE, -this.rack04.rotationPointZ * DEFAULT_SCALE);
        this.rack04.render(DEFAULT_SCALE);
        GlStateManager.popMatrix();
        this.rSide.render(DEFAULT_SCALE);
        this.light01.render(DEFAULT_SCALE);
        this.cassette02.render(DEFAULT_SCALE);
        this.lhandle.render(DEFAULT_SCALE);
        this.faceplate.render(DEFAULT_SCALE);
        this.light03.render(DEFAULT_SCALE);
        GlStateManager.pushMatrix();
        GlStateManager.translate(this.rack02.offsetX, this.rack02.offsetY, this.rack02.offsetZ);
        GlStateManager.translate(this.rack02.rotationPointX * DEFAULT_SCALE, this.rack02.rotationPointY * DEFAULT_SCALE, this.rack02.rotationPointZ * DEFAULT_SCALE);
        GlStateManager.scale(1.0D, 0.8D, 1.0D);
        GlStateManager.translate(-this.rack02.offsetX, -this.rack02.offsetY, -this.rack02.offsetZ);
        GlStateManager.translate(-this.rack02.rotationPointX * DEFAULT_SCALE, -this.rack02.rotationPointY * DEFAULT_SCALE, -this.rack02.rotationPointZ * DEFAULT_SCALE);
        this.rack02.render(DEFAULT_SCALE);
        GlStateManager.popMatrix();
        this.rhandle.render(DEFAULT_SCALE);
        this.rack06.render(DEFAULT_SCALE);
        this.lSide.render(DEFAULT_SCALE);
    }
}
